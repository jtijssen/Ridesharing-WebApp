const express = require('express')
const path = require('path')
var bodyParser = require('body-parser');
const PORT = process.env.PORT || 5000
var vehicles = ["JANET", "NgfcWZmS", "tNEh59TC", "suFKyeZg", "VMerzMH8", "6tWDkKh6", "ajNnfhJj", "bCxY6mCw", "Cq4NX9eE", "mXfkjrFw", "EMYaM9D8", "nZXB8ZHz", "Tkwu74WC", "TnA763WN", "TaR8XyMe", "5KWpnAJN", "uf5ZrXYw"];

//Because of this, I do not need to hardcode a password and username ;)
//The credentials are stored in the system environment generated by Heroku
var mongoUri = process.env.MONGODB_URI || process.env.MONGOLAB_URI || process.env.MONGOLAB_MAROON_URI || 'mongodb://localhost/nodemongoexample';


var MongoClient = require('mongodb').MongoClient, format = require('util').format;
var db = MongoClient.connect(mongoUri, function(error, databaseConnection) {
  if(error){
    console.log('failed to connect to database!');
    console.log(error);
  }
  db = databaseConnection;
});

// Credit: https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript
function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

express()
  .use(bodyParser.json())
  .use(bodyParser.urlencoded({ extended: true }))
  .use(express.static(path.join(__dirname, 'public')))
  .set('views', path.join(__dirname, 'views'))
  .set('view engine', 'ejs')
  .get('/', (req, res) => {
      res.set('Content-Type', 'text/html');
      var indexPage = '';
      db.collection('vehicles', function(error, collection) {
        collection.find().toArray(function(error, resul){
          if(error){
            res.send('<!DOCTYPE HTML><html><head><title>Error</title></head><body><h1>Whoops, something went wrong loading the page!</h1></body></html>');
          }
          else{
            resul.reverse();
            indexPage += "<!DOCTYPE HTML><html><head><title>List of Vehicles:</title></head><body><h1>Vehicles in descending order</h1>";
            for (var j = 0; j < resul.length; j++) {
              indexPage += "<p>" + resul[j].username + " was looking for passengers at " + resul[j].lat + ", " + resul[j].lng + " on " + (new Date(resul[j].created_at)).toUTCString() + "</p>";
            }
            indexPage += "</body></html>";
            res.send(indexPage);
          }
        });
      });
    })
  .get('/passenger.json', (req, res) => {
    var url = req.url;
    var Jstring = [];
    var query = getParameterByName('username', url);
      db.collection('passengers', function(error, collection) {
      collection.find().toArray(function(error, results){
          var recent_data = [];
          var time_stamp;
          for(var u = 0; u < results.length; u++){
            if(results[u].username == query){
              results[u].created_at = new Date(results[u].created_at).toUTCString();
              recent_data.push(results[u]);
            }
          }
          res.send(JSON.stringify(recent_data));
        });
      });
  })
  .post('/rides', (req, res) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    var is_veh = 0;

    var user = req.body.username;
    var user_lat = parseFloat(req.body.lat);
    var user_lng = parseFloat(req.body.lng);
    var i;
    var threeMinutesAgo = new Date().getTime() - (1000 * 60 * 3);
    for(i = 0; i < vehicles.length; i++){
      if (user == vehicles[i]){
        is_veh = 1;
      }
    }
    if(user == undefined || user_lat == undefined || user_lng == undefined)
    {
      res.send('{"error":"Whoops, something is wrong with your data!"}')
    }
    else{
      var time = new Date().getTime();
      var toInsert = {
        "username": user,
        "lat": user_lat,
        "lng": user_lng,
        "created_at": time
      };
        var usertype = 'passengers';
        var userNonType = 'vehicles';
        if(is_veh == 1){
          usertype = 'vehicles';
          userNonType = 'passengers';
        }
        db.collection(usertype, function(error, coll) {
        coll.insert(toInsert, function(error, saved) {
          if (error) {
            res.send(500);
          }
        });
      });
      db.collection(userNonType, function(error, collection) {
        collection.find().toArray(function(error, results){
          var recent_data = [];
          for(i = 0; i < results.length; i++){
            if (results[i].created_at > threeMinutesAgo){
              results[i].created_at = new Date(results[i].created_at).toUTCString();
              recent_data.push(results[i]);
            }
          }
          res.send('{"' + userNonType + '": ' + JSON.stringify(recent_data) + '}');
        });
      });
    }
  })
  .listen(PORT, () => console.log(`Listening on ${ PORT }`))
